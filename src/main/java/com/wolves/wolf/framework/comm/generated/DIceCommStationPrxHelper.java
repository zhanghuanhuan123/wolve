// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `call_interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.wolves.wolf.framework.comm.generated;

/**
 * Provides type-specific helper functions.
 **/
public final class DIceCommStationPrxHelper extends Ice.ObjectPrxHelperBase implements DIceCommStationPrx {
    public static final String[] __ids =
            {
                    "::Ice::Object",
                    "::com::wolves::wolf::framework::comm::generated::DIceCommStation"
            };
    public static final long serialVersionUID = 0L;
    private static final String __do_name = "do";
    private static final String __touch_name = "touch";

    static public void __do_completed(Ice.TwowayCallbackArg1<byte[]> __cb, Ice.AsyncResult __result) {
        com.wolves.wolf.framework.comm.generated.DIceCommStationPrx __proxy = (com.wolves.wolf.framework.comm.generated.DIceCommStationPrx) __result.getProxy();
        byte[] __ret = null;
        try {
            __ret = __proxy.end_do(__result);
        } catch (Ice.LocalException __ex) {
            __cb.exception(__ex);
            return;
        } catch (Ice.SystemException __ex) {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DIceCommStationPrx checkedCast(Ice.ObjectPrx __obj) {
        return checkedCastImpl(__obj, ice_staticId(), DIceCommStationPrx.class, DIceCommStationPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DIceCommStationPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx) {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), DIceCommStationPrx.class, DIceCommStationPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param __obj   The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DIceCommStationPrx checkedCast(Ice.ObjectPrx __obj, String __facet) {
        return checkedCastImpl(__obj, __facet, ice_staticId(), DIceCommStationPrx.class, DIceCommStationPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param __obj   The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx   The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DIceCommStationPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx) {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), DIceCommStationPrx.class, DIceCommStationPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     *
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static DIceCommStationPrx uncheckedCast(Ice.ObjectPrx __obj) {
        return uncheckedCastImpl(__obj, DIceCommStationPrx.class, DIceCommStationPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     *
     * @param __obj   The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static DIceCommStationPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet) {
        return uncheckedCastImpl(__obj, __facet, DIceCommStationPrx.class, DIceCommStationPrxHelper.class);
    }

    /**
     * Provides the Slice type ID of this type.
     *
     * @return The Slice type ID.
     **/
    public static String ice_staticId() {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, DIceCommStationPrx v) {
        __os.writeProxy(v);
    }

    public static DIceCommStationPrx __read(IceInternal.BasicStream __is) {
        Ice.ObjectPrx proxy = __is.readProxy();
        if (proxy != null) {
            DIceCommStationPrxHelper result = new DIceCommStationPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public byte[] _do(byte[] request) {
        return _do(request, null, false);
    }

    public byte[] _do(byte[] request, java.util.Map<String, String> __ctx) {
        return _do(request, __ctx, true);
    }

    private byte[] _do(byte[] request, java.util.Map<String, String> __ctx, boolean __explicitCtx) {
        __checkTwowayOnly(__do_name);
        return end_do(begin_do(request, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_do(byte[] request) {
        return begin_do(request, null, false, false, null);
    }

    public Ice.AsyncResult begin_do(byte[] request, java.util.Map<String, String> __ctx) {
        return begin_do(request, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_do(byte[] request, Ice.Callback __cb) {
        return begin_do(request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_do(byte[] request, java.util.Map<String, String> __ctx, Ice.Callback __cb) {
        return begin_do(request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_do(byte[] request, Callback_DIceCommStation_do __cb) {
        return begin_do(request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_do(byte[] request, java.util.Map<String, String> __ctx, Callback_DIceCommStation_do __cb) {
        return begin_do(request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_do(byte[] request,
                                    IceInternal.Functional_GenericCallback1<byte[]> __responseCb,
                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb) {
        return begin_do(request, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_do(byte[] request,
                                    IceInternal.Functional_GenericCallback1<byte[]> __responseCb,
                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                    IceInternal.Functional_BoolCallback __sentCb) {
        return begin_do(request, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_do(byte[] request,
                                    java.util.Map<String, String> __ctx,
                                    IceInternal.Functional_GenericCallback1<byte[]> __responseCb,
                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb) {
        return begin_do(request, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_do(byte[] request,
                                    java.util.Map<String, String> __ctx,
                                    IceInternal.Functional_GenericCallback1<byte[]> __responseCb,
                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                    IceInternal.Functional_BoolCallback __sentCb) {
        return begin_do(request, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_do(byte[] request,
                                     java.util.Map<String, String> __ctx,
                                     boolean __explicitCtx,
                                     boolean __synchronous,
                                     IceInternal.Functional_GenericCallback1<byte[]> __responseCb,
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                     IceInternal.Functional_BoolCallback __sentCb) {
        return begin_do(request, __ctx, __explicitCtx, __synchronous,
                new IceInternal.Functional_TwowayCallbackArg1<byte[]>(__responseCb, __exceptionCb, __sentCb) {
                    public final void __completed(Ice.AsyncResult __result) {
                        DIceCommStationPrxHelper.__do_completed(this, __result);
                    }
                });
    }

    private Ice.AsyncResult begin_do(byte[] request,
                                     java.util.Map<String, String> __ctx,
                                     boolean __explicitCtx,
                                     boolean __synchronous,
                                     IceInternal.CallbackBase __cb) {
        __checkAsyncTwowayOnly(__do_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__do_name, __cb);
        try {
            __result.prepare(__do_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSequenceHelper.write(__os, request);
            __result.endWriteParams();
            __result.invoke();
        } catch (Ice.Exception __ex) {
            __result.abort(__ex);
        }
        return __result;
    }

    public byte[] end_do(Ice.AsyncResult __iresult) {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __do_name);
        try {
            if (!__result.__wait()) {
                try {
                    __result.throwUserException();
                } catch (Ice.UserException __ex) {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            byte[] __ret;
            __ret = ByteSequenceHelper.read(__is);
            __result.endReadParams();
            return __ret;
        } finally {
            if (__result != null) {
                __result.cacheMessageBuffers();
            }
        }
    }

    public void touch(byte[] request) {
        touch(request, null, false);
    }

    public void touch(byte[] request, java.util.Map<String, String> __ctx) {
        touch(request, __ctx, true);
    }

    private void touch(byte[] request, java.util.Map<String, String> __ctx, boolean __explicitCtx) {
        end_touch(begin_touch(request, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_touch(byte[] request) {
        return begin_touch(request, null, false, false, null);
    }

    public Ice.AsyncResult begin_touch(byte[] request, java.util.Map<String, String> __ctx) {
        return begin_touch(request, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_touch(byte[] request, Ice.Callback __cb) {
        return begin_touch(request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_touch(byte[] request, java.util.Map<String, String> __ctx, Ice.Callback __cb) {
        return begin_touch(request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_touch(byte[] request, Callback_DIceCommStation_touch __cb) {
        return begin_touch(request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_touch(byte[] request, java.util.Map<String, String> __ctx, Callback_DIceCommStation_touch __cb) {
        return begin_touch(request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_touch(byte[] request,
                                       IceInternal.Functional_VoidCallback __responseCb,
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb) {
        return begin_touch(request, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_touch(byte[] request,
                                       IceInternal.Functional_VoidCallback __responseCb,
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                       IceInternal.Functional_BoolCallback __sentCb) {
        return begin_touch(request, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_touch(byte[] request,
                                       java.util.Map<String, String> __ctx,
                                       IceInternal.Functional_VoidCallback __responseCb,
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb) {
        return begin_touch(request, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_touch(byte[] request,
                                       java.util.Map<String, String> __ctx,
                                       IceInternal.Functional_VoidCallback __responseCb,
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                       IceInternal.Functional_BoolCallback __sentCb) {
        return begin_touch(request, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_touch(byte[] request,
                                        java.util.Map<String, String> __ctx,
                                        boolean __explicitCtx,
                                        boolean __synchronous,
                                        IceInternal.Functional_VoidCallback __responseCb,
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                        IceInternal.Functional_BoolCallback __sentCb) {
        return begin_touch(request,
                __ctx,
                __explicitCtx,
                __synchronous,
                new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_touch(byte[] request,
                                        java.util.Map<String, String> __ctx,
                                        boolean __explicitCtx,
                                        boolean __synchronous,
                                        IceInternal.CallbackBase __cb) {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__touch_name, __cb);
        try {
            __result.prepare(__touch_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ByteSequenceHelper.write(__os, request);
            __result.endWriteParams();
            __result.invoke();
        } catch (Ice.Exception __ex) {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_touch(Ice.AsyncResult __iresult) {
        __end(__iresult, __touch_name);
    }
}
